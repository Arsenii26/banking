server.port=9000

#spring.datasource.url = jdbc:mysql://localhost:3306/onlinebanking?createDatabaseIfNotExist=true
#spring.datasource.url = jdbc:mysql://192.168.99.100:3306/onlinebanking?createDatabaseIfNotExist=true
#spring.datasource.url = jdbc:mysql://${RDS_IP}:${RDS_PORT}/${RDS_DB_NAME}?user=${RDS_USERNAME}&password=${RDS_PASSWORD}&createDatabaseIfNotExist=true
spring.datasource.url = jdbc:mysql://${RDS_IP:localhost}:${RDS_PORT:3306}/${RDS_DB_NAME:onlinebanking}?createDatabaseIfNotExist=true


spring.datasource.username = ${RDS_USERNAME:springstudent}
spring.datasource.password = ${RDS_PASSWORD:springstudent}

# Keep the connection alive if idle for a long time (needed in production)
spring.datasource.testWhileIdle = true
spring.datasource.validationQuery = SELECT 1

# ===============================
# = JPA / HIBERNATE
# ===============================

# Use spring.jpa.properties.* for Hibernate native properties (the prefix is
# stripped before adding them to the entity manager).

# Show or not log for each sql query
# for debug only
spring.jpa.show-sql = true

# Hibernate ddl auto (create, create-drop, update): with "update" the database
# schema will be automatically updated accordingly to java entities found in
# the project
spring.jpa.hibernate.ddl-auto = update

#https://docs.spring.io/spring-boot/docs/2.1.x/reference/html/howto-database-initialization.html
#spring.jpa.hibernate.ddl-auto=none
#spring.datasource.initialization-mode=always


# Allows Hibernate to generate SQL optimized for a particular DBMS
#spring.jpa.properties.hibernate.dialect = org.hibernate.dialect.MySQL5Dialect
spring.jpa.properties.hibernate.dialect = org.hibernate.dialect.MySQL57Dialect

#create db fields
#Allows Hibernate to generate SQL optimized for a particular DBMS
spring.jpa.database-platform=org.hibernate.dialect.MySQL5InnoDBDialect